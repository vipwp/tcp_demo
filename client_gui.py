#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Nov 27, 2018 09:27:22 PM CST  platform: Windows NT

import sys
import threading
import socket
import select
import queue
import pickle
import datetime

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import client_gui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    client_gui_support.set_Tk_var()
    top = lb_message (root)
    client_gui_support.init(root, top)
    root.mainloop()

w = None
def create_lb_message(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    client_gui_support.set_Tk_var()
    top = lb_message (w)
    client_gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_lb_message():
    global w
    w.destroy()
    w = None

class lb_message:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("859x509+519+249")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")

        self.slb_msg = ScrolledListBox(top)
        self.slb_msg.place(relx=0.012, rely=0.079, relheight=0.768
                , relwidth=0.979)
        self.slb_msg.configure(background="white")
        self.slb_msg.configure(disabledforeground="#a3a3a3")
        self.slb_msg.configure(font="TkFixedFont")
        self.slb_msg.configure(foreground="black")
        self.slb_msg.configure(highlightbackground="#d9d9d9")
        self.slb_msg.configure(highlightcolor="#d9d9d9")
        self.slb_msg.configure(selectbackground="#c4c4c4")
        self.slb_msg.configure(selectforeground="black")
        self.slb_msg.configure(width=10)

        self.btn_send = tk.Button(top)
        self.btn_send.place(relx=0.652, rely=0.864, height=48, width=289)
        self.btn_send.configure(activebackground="#ececec")
        self.btn_send.configure(activeforeground="#000000")
        self.btn_send.configure(background="#d9d9d9")
        self.btn_send.configure(disabledforeground="#a3a3a3")
        self.btn_send.configure(foreground="#000000")
        self.btn_send.configure(highlightbackground="#d9d9d9")
        self.btn_send.configure(highlightcolor="black")
        self.btn_send.configure(pady="0")
        self.btn_send.configure(text='''发送''')
        self.btn_send.configure(width=289)

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.012, rely=0.02, height=23, width=54)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''服务地址''')

        self.txt_host = tk.Entry(top)
        self.txt_host.place(relx=0.081, rely=0.02,height=17, relwidth=0.168)
        self.txt_host.configure(background="white")
        self.txt_host.configure(disabledforeground="#a3a3a3")
        self.txt_host.configure(font="TkFixedFont")
        self.txt_host.configure(foreground="#000000")
        self.txt_host.configure(insertbackground="black")
        self.txt_host.configure(textvariable=client_gui_support.localhost)
        self.txt_host.insert(10, '127.0.0.1')

        self.Label1_1 = tk.Label(top)
        self.Label1_1.place(relx=0.244, rely=0.02, height=23, width=54)
        self.Label1_1.configure(activebackground="#f9f9f9")
        self.Label1_1.configure(activeforeground="black")
        self.Label1_1.configure(background="#d9d9d9")
        self.Label1_1.configure(disabledforeground="#a3a3a3")
        self.Label1_1.configure(foreground="#000000")
        self.Label1_1.configure(highlightbackground="#d9d9d9")
        self.Label1_1.configure(highlightcolor="black")
        self.Label1_1.configure(text='''端口''')

        self.txt_port = tk.Entry(top)
        self.txt_port.place(relx=0.297, rely=0.02,height=17, relwidth=0.168)
        self.txt_port.configure(background="white")
        self.txt_port.configure(disabledforeground="#a3a3a3")
        self.txt_port.configure(font="TkFixedFont")
        self.txt_port.configure(foreground="#000000")
        self.txt_port.configure(highlightbackground="#d9d9d9")
        self.txt_port.configure(highlightcolor="black")
        self.txt_port.configure(insertbackground="black")
        self.txt_port.configure(selectbackground="#c4c4c4")
        self.txt_port.configure(selectforeground="black")
        self.txt_port.insert(10, '4444')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.btn_connect = tk.Button(top)
        self.btn_connect.place(relx=0.489, rely=0.01, height=28, width=129)
        self.btn_connect.configure(activebackground="#ececec")
        self.btn_connect.configure(activeforeground="#000000")
        self.btn_connect.configure(background="#d9d9d9")
        self.btn_connect.configure(disabledforeground="#a3a3a3")
        self.btn_connect.configure(foreground="#000000")
        self.btn_connect.configure(highlightbackground="#d9d9d9")
        self.btn_connect.configure(highlightcolor="black")
        self.btn_connect.configure(pady="0")
        self.btn_connect.configure(text='''连接''')
        self.btn_connect.configure(width=129)
        self.btn_connect.bind('<Button-1>', self.btn_connect_click)


        self.lb_server_status = tk.Label(top)
        self.lb_server_status.place(relx=0.012, rely=0.963, height=23)
        self.lb_server_status.configure(background="#d9d9d9")
        self.lb_server_status.configure(disabledforeground="#a3a3a3")
        self.lb_server_status.configure(foreground="#000000")
        self.lb_server_status.configure(text='''未连接''')

        self.txt_message = tk.Text(top)
        self.txt_message.place(relx=0.012, rely=0.864, relheight=0.102
                , relwidth=0.633)
        self.txt_message.configure(background="white")
        self.txt_message.configure(font="TkTextFont")
        self.txt_message.configure(foreground="black")
        self.txt_message.configure(highlightbackground="#d9d9d9")
        self.txt_message.configure(highlightcolor="black")
        self.txt_message.configure(insertbackground="black")
        self.txt_message.configure(selectbackground="#c4c4c4")
        self.txt_message.configure(selectforeground="black")
        self.txt_message.configure(takefocus="0")
        self.txt_message.configure(width=544)
        self.txt_message.configure(wrap='word')

        self.txt_message.bind('<Return>', self.txt_message_on_key)

        self.btn_send.bind('<Button-1>', self.btn_onclick)

    def btn_connect_click(self, events):
        self.socket_thread = SocketThread(self)
        self.socket_thread.start()

    def btn_onclick(self, events):
        msg = self.txt_message.get('1.0', tk.END).strip()
        if msg:
            # self.append_msg(msg)
            self.socket_thread.send_msg(msg)
            self.txt_message.delete(0.0, tk.END)

    def append_msg(self, msg, fg=None, bg=None):
        self.slb_msg.insert(tk.END, msg)
        item_config = {}
        if fg:
            item_config['fg'] = fg
        if bg:
            item_config['bg'] = bg
        if item_config:
            self.slb_msg.itemconfig(tk.END, item_config)

        self.slb_msg.yview(tk.END)

    def txt_message_on_key(self, event):
        self.btn_onclick(None)
        return 'break'


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


class SocketThread(threading.Thread):
    BUFFER_SIZE = 2048

    def __init__(self, form, *args, **kwargs):
        super(SocketThread, self).__init__(*args, **kwargs)
        self.setDaemon(True)

        self.form = form
        self.msg_queue = queue.Queue()
        self.outputs = []
        self.server_sock = None
        self.stoped = False
        self.name = None

    @classmethod
    def read_socket(cls, socks):
        data = b''
        while True:
            _data = socks.recv(cls.BUFFER_SIZE)
            data += _data
            data_len = len(_data)
            if data_len == 0:
                break
            else:
                if data_len < cls.BUFFER_SIZE:
                    break
        return data

    def send_msg(self, msg):
        self.msg_queue.put_nowait(msg)
        self.outputs.append(self.server_sock)

    def disconnected(self):
        self.form.lb_server_status.config(text='未连接')
        self.form.append_msg('连接已断开')
        self.server_sock.close()
        self.server_sock = None
        self.stoped = True

    def run(self):
        server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            server_sock.connect((self.form.txt_host.get(), int(self.form.txt_port.get())))
        except Exception as ex:
            self.form.append_msg(str(ex))
            return
        server_sock.setblocking(False)
        self.server_sock = server_sock

        self.stoped = False

        while not self.stoped:
            readable_socks, writeable_socks, exception_socks = select.select(
                [server_sock], self.outputs, [server_sock], 0.5)

            for socks in readable_socks:
                try:
                    data = self.read_socket(socks)
                except Exception as e:
                    print(e)
                    data = None
                if data is not None:
                    d_data = pickle.loads(data)
                    msg = d_data.get('msg')
                    if msg:
                        config = {}
                        if msg.startswith(self.name):
                            config['fg'] = 'blue'
                        else:
                            pass
                        self.form.append_msg(msg, **config)

                    name = d_data.get('id')
                    if name:
                        self.name = name

                    status = d_data.get('status')
                    if status:
                        self.form.lb_server_status.config(text=status)
                        self.form.lb_server_status.update_idletasks()

                else:
                    self.disconnected()

            for socks in writeable_socks:
                while True:
                    try:
                        data = self.msg_queue.get_nowait()
                        socks.send(pickle.dumps(data))
                    except queue.Empty:
                        break

                self.outputs.remove(socks)


if __name__ == '__main__':
    vp_start_gui()

